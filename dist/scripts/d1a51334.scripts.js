"use strict";var neovacUIApp=angular.module("neovacUIApp",["ngResource","nvServices","herokuOauth"]);neovacUIApp.config(["$locationProvider","$routeProvider",function(a,b){b.when("/",{templateUrl:"views/main.html",controller:"MainCtrl"}).when("/:kind/:value",{templateUrl:"views/main.html",controller:"xidCtrl"}).otherwise({redirectTo:"/"})}]),angular.module("nvServices",["ngResource","herokuAPI"]).factory("XidSet",["$resource","herokuKey",function(a,b){return a("http://neovac.herokuapp.com/:kind/:value.json",{value:"value",kind:"kind"},{query:{method:"GET",headers:{Authorization:"Basic "+Base64.encode(":"+b.get())},isArray:!0}})}]),angular.module("angularOauth",[]).provider("Token",function(){var a=function(a){var b=[];return angular.forEach(a,function(a,c){b.push(encodeURIComponent(c)+"="+encodeURIComponent(a))}),b.join("&")},b="token",c={},d={clientId:c,redirectUri:c,authorizationEndpoint:c,localStorageName:"accessToken",verifyFunc:c,scopes:[]};this.extendConfig=function(a){d=angular.extend(d,a)},this.$get=["$q","$http","$window","$rootScope",function(e,f,g,h){var i=[];if(angular.forEach(d,function(a,b){a===c&&i.push(b)}),i.length)throw new Error("TokenProvider is insufficiently configured.  Please configure the following options using TokenProvider.extendConfig: "+i.join(", "));if(!d.clientId)throw new Error("clientId needs to be configured using TokenProvider.");var j=function(){return{response_type:b,client_id:d.clientId,redirect_uri:d.redirectUri,scope:d.scopes.join(" ")}};return{get:function(){return localStorage[d.localStorageName]},set:function(a){localStorage[d.localStorageName]=a},verifyAsync:function(a){var b=e.defer();return d.verifyFunc(d,a,b),b.promise},getTokenByPopup:function(b,c){c=angular.extend({name:"AuthPopup",openParams:{width:650,height:300,resizable:!0,scrollbars:!0,status:!0}},c);var f=e.defer(),i=angular.extend(j(),b),k=d.authorizationEndpoint+"?"+a(i),l=function(a){var b=[];return angular.forEach(a,function(a,c){(a||0===a)&&(a=a===!0?"yes":a,b.push(c+"="+a))}),b.join(",")},m=window.open(k,c.name,l(c.openParams));return angular.element(g).bind("message",function(a){a.source==m&&a.origin==window.location.origin&&h.$apply(function(){a.data.access_token?f.resolve(a.data):f.reject(a.data)})}),f.promise}}}]}).controller("CallbackCtrl",["$scope","$location",function(a,b){function c(a){var b,c,d={};return angular.forEach((a||"").split("&"),function(a){a&&(b=a.split("="),c=decodeURIComponent(b[0]),d[c]=angular.isDefined(b[1])?decodeURIComponent(b[1]):!0)}),d}var d=b.path().substring(1),e=c(d);window.opener.postMessage(e,"*"),window.close()}]);var neovacUIApp=angular.module("neovacUIApp");neovacUIApp.controller("xidCtrl",["$scope","XidSet","$location","$routeParams",function(a,b,c,d){a.query=d.value,a.updateXidSet=function(){console.log("getting xids"),console.log(d),a.xids=b.query({value:d.value,kind:d.kind}),console.log("done getting xids"),console.log(a.xids)},a.getDate=function(a){var b=new Date(1e3*a);return b.toUTCString()},a.updateLocation=function(){var b=/([0-9a-fA-F]*-[0-9a-fA-F]*-[0-9a-fA-F]*-[0-9a-fA-F]*-[0-9a-fA-F]*)/,d=/^[0-9]+$/,e="",f=a.query;b.test(a.query)?(console.log("found uuid"),e="request_id"):d.test(a.query)?(console.log("found AppId"),e="app_id"):(console.log("found AppName"),e="app"),c.path(e+"/"+f)},d.value&&a.updateXidSet()}]),angular.module("herokuAPI",["ngCookies"]).provider("herokuKey",function(){var a={localStorageName:"herokuApi"};this.extendConfig=function(b){a=angular.extend(a,b)},this.$get=["$cookieStore",function(a){return{get:function(){var b=a.get("token");return null===b&&(b=localStorage.token),b}}}]});